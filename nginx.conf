# set to number of CPU cores in prod or to auto
worker_processes 1;   

events {
    # no of connections per worker_processes
    worker_connections 1024;
}

# handles the  logic of how to send the requests
http {
    
    # send back the type of files in the response header. for browser
    include mime.types;

    upstream nodejs_cluster {

        # by default, NGINX uses the Round robin algorithm. we can override it
        # here we use algo to allow connections to least busy server using least_conn
        least_conn;
        server 127.0.0.1:3001;
        server 127.0.0.1:3002;
        server 127.0.0.1:3003;

    }

# handles how to route the requests..port, server_name etc
    server{
        listen 443 ssl;
        
        #defining ssl
        ssl_certificate /Users/athul/nginx-certs/nginx-selfsigned.crt;
        ssl_certificate_key /Users/athul/nginx-certs/nginx-selfsigned.key;

        # server_name refers to the domain of the request. ie, 
        # where client is sending the request to. ex : google.com
        server_name localhost;
        # whenever someone access localhost:8080, what to do with request
        location / {
              
              # we need nginx to forward request to another server. in our case the node apps
              proxy_pass http://nodejs_cluster;

              # passes what url client is requesting to the backend for proper handling
              # since nginx acts as a reverse proxy, requests coming to backend servers
              # orginates from nginx , not directly from client. backend would see the IP of NGINX
              # so we need to let the backend know. 
              proxy_set_header Host $host;

              # we also need to pass the real IP of client
              proxy_set_header X-Real-IP $remote_addr;
        }
         

    }

    # if client connects to port 8080 or if it connects to non https, we redirect to https
    server {
        listen 80;
        server_name localhost;
        
        location / {
            return 301 https:$host$request_uri;
        }
    }
     
}